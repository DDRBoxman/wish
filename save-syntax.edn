;; experiments with syntax of save files

{:v [1 1] ; wish + sheet version numbers
 :updated 1234 ; date
 :sheet-id :id

 ; lists of ids; note that not all systems will support multi class or multi race,
 ; but we'll allow it in the file
 :classes []
 :races []

 ; map of limited-use ID -> number used
 :limited-uses
 {:paladin/lay-on-hands#uses 0}

 ; map of feature-id -> options chosen. The value may be a vector or a set,
 ; but *should* be a collection.
 :options
 {:paladin/oath [:paladin/vengeance]}

 ; map of (inst-id | item-id) -> count. inst-id is the id of a specific
 ; *instance* of an item, whose details will be stored in :items. For
 ; an item from a data source, the spec in :items MUST include the :id.
 ; If the key is not in :items, it is an item-id, which belongs to
 ; some data source, and the item probably :stacks?.
 :inventory {}

 ; list of ids that, if present, indicates a manual
 ; ordering of the inventory
 :inventory-order []

 ; map of custom inst-id -> spec
 ; This can be used for instanced items, such as weapons, or for custom
 ; items that are always instanced. The nice thing about instancing items
 ; is we can have per-item notes (like if you have a thing that you can
 ; store spells in, you could actually put a note on that item)
 :items
 {:shortsword/inst1 {:id :shortsword}
  :custom/weird-rock {:name "Weird Rock"}}

 ; set of inst-ids that are currently equipped
 :equipped #{}

 ; opaque, sheet-specific data
 :sheet {}

 ; notes is a sequence of [date note] pairs
 :notes
 [[1234 "Note"]]}

