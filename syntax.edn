; properly distinguish between "declare" and "provide"
(declare-features
  {:id :fey-ancestry
   :name "",
   :desc "",

   ; when a feature is provided to an entity, any function on the :!
   ; key is called with the entity's current state
   :! (fn [state]
        (-> state
            (provide-attr [:saves :fey-ancestry]
                          {:desc ""})))}

  {:id :feat
   :instanced? true
   :max-options 1
   :values #(values-from-list :all-feats)}

  {:id :abi-or-feat
   :5e/implicit? true
   :instanced? true
   :max-options 1
   :values [{:id :abi-or-feat/abi
             :! (fn [state] (provide-feature state :ability-improvement))}
            {:id :abi-or-feat/feat
             :! (fn [state] (provide-feature state :feat))}]}
  )

(declare-features
  {:id :hit-dice/d6
   :5e/implicit? true
   :! (fn [state]
        (-> state
            (provide-attr :5e/hit-dice 6)
            (add-limited-use {:id :hit-dice/d6#uses
                              :5e/implicit? true
                              :restore-trigger :long-rest
                              ; etc
                              })))})

; use code to generate features:
(declare-features
  (for [id [:save-proficiency/cha :save-proficiency/dex :save-proficiency/con]]
    {:id id
     :! (fn [state] (provide-attr state id true))}))

(add-to-list
  {:id :all-feats
   :type :feature}

  [{:id :feat/grappler
    :availability-attr [:feats :feat/grappler]
    :available? (fn [sheet]
                  (>= (get-in sheet [:abilities :dex])
                      13))
    :! (fn [state] (provide-attr state [:action :feat/grappler] true))}])

(declare-class
  {:id :cleric

   ; initial attrs:
   :attrs {:5e/spellcaster
           {:cleric
            {:cantrips [1 3,
                        4 1,
                        10 1]}}}

   ; classes and races also use :! for symmetry
   :! (on-state ; on-state is a convenience macro for #(-> % ~@body)

        ; provide-features is a semantic alias
        (provide-features
          :hit-dice/d8
          :hp
          :unarmed-strike
          :feats

          ; save proficiencies
          :save-proficiency/wis
          :save-proficiency/cha

          ; ... etc

          ; features can be declared inline as well
          {:id :cleric/skill-proficiencies
           :5e/implicit? true
           :primary-only? true
           :max-options 2
           :values [:proficiency/history, #_[...] ]}

          {:id :cleric/domain
           :max-options 1}
          ))

   ; levels are always additive
   :levels {2 {:! (fn [state]
                    (-> state
                        (provide-features
                          :cleric/channel-divinity

                          {:id :cleric/channel-turn-undead
                           :! (fn [state]
                                (provide-attr state [:action :cleric/channel-turn-undead] true))}
                          )))}}
   })


; we should be able to inject global helper functions into the engine
(defn action-wrapper [action-type]
  (fn [feature-def]
    ; since :! is always a function that accepts a state and returns a new
    ; state, it is easy to compose new actions onto it
    (let [id (:id feature-def)
          additional-action (on-state
                              (provide-attr
                                [:action id]
                                true))]
      (assoc feature-def :! (if-let [action (:! feature-def)]
                              (comp additional-action action)
                              additional-action)))))

(def as-action (action-wrapper :action))
(def as-bonus (action-wrapper :bonus))

(declare-options
  :cleric/domain

  {:id :cleric/life-domain

   ; options are just features, so they also support :!, which is evaluated in
   ; the same state context that their feature is evaluated in *when it is
   ; chosen*
   :! (on-state

        ; NOTE: add-to-list supports both the 2-arity used above and a
        ; three-arity, shown here, for convenience. It does not support
        ; variadic invocation; the last arg must always be sequential
        (add-to-list
          :cleric/extra-spells
          [:spell/bless :spell/cure-wounds]
          )

        (provide-features
          {:id :cleric/disciple-of-life
           :! (on-state
                (provide-attr
                  [:buffs :spells :healing :cleric/disciple-of-life]
                  (fn [spell-level]
                    (+ 2 spell-level))))}))

   ; similarly, they can also be level scaled
   :levels {2 {:! (on-state
                    (provide-feature

                      ; using a helper function
                      (as-action
                        {:id :cleric/channel-preserve-life})))}}
   })
